"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDomainByRegion = exports.getDomainByCountryCode = exports.sendRequest = void 0;
const crypto_1 = __importDefault(require("crypto"));
const axios_1 = __importDefault(require("axios"));
const store_1 = require("../store");
const regionMap_1 = require("./regionMap");
function getNonce() {
    return 'abcd1234';
}
function getAuthSign(method, params) {
    let str = '';
    let sign = '';
    if (method === 'GET') {
        const paramList = [];
        Object.keys(params).sort().forEach((key) => {
            paramList.push(`${key}=${params[key]}`);
        });
        str = paramList.join('&');
    }
    else {
        str = JSON.stringify(params);
    }
    console.log(`str: ${str}\n\n`);
    sign = crypto_1.default.createHmac('sha256', store_1.getAppSecret()).update(str).digest('base64');
    return sign;
}
function sendRequest(url, method, params, at) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = {
            url,
            method,
            baseURL: store_1.getDomain(),
            headers: {}
        };
        console.log(config);
        config.headers['X-CK-Nonce'] = getNonce();
        config.headers['X-CK-Appid'] = store_1.getAppId();
        if (at) {
            config.headers['Authorization'] = `Bearer ${at}`;
        }
        else {
            config.headers['Authorization'] = `Sign ${getAuthSign(method, params)}`;
        }
        if (method === 'POST' || method === 'PUT' || method === 'DELETE') {
            config.headers['Content-Type'] = 'application/json';
        }
        if (method === 'GET' && params) {
            config.params = params;
        }
        else if (params) {
            config.data = params;
        }
        console.log(`${JSON.stringify(config, null, 2)}\n\n`);
        try {
            const res = yield axios_1.default(config);
            console.log(`${JSON.stringify(res.data, null, 2)}\n\n`);
            if (res.data.error === 10004) {
                store_1.setDomain(getDomainByRegion(res.data.data.region));
                return yield sendRequest(url, method, params, at);
            }
            return res.data;
        }
        catch (e) {
            console.log(e);
            return {
                error: 500,
                msg: 'axios error',
                data: {}
            };
        }
    });
}
exports.sendRequest = sendRequest;
function getDomainByCountryCode(code) {
    const ret = regionMap_1.regionMap.filter((item) => item.countryCode === code);
    if (ret.length === 0) {
        return '';
    }
    else {
        return getDomainByRegion(ret[0].region);
    }
}
exports.getDomainByCountryCode = getDomainByCountryCode;
function getDomainByRegion(region) {
    let result = '';
    switch (region) {
        case 'cn':
            result = 'https://cn-apia.coolkit.cn';
            break;
        case 'as':
            result = 'https://as-apia.coolkit.cc';
            break;
        case 'us':
            result = 'https://us-apia.coolkit.cc';
            break;
        case 'eu':
            result = 'https://eu-apia.coolkit.cc';
            break;
        default:
            result = '';
            break;
    }
    return result;
}
exports.getDomainByRegion = getDomainByRegion;
