import { showStore } from './store';
declare function init(params: {
    appId: string;
    appSecret: string;
    debug?: boolean;
}): void;
declare const _default: {
    init: typeof init;
    showStore: typeof showStore;
    user: {
        login(params: {
            lang?: "cn" | "en" | undefined;
            countryCode: string;
            email?: string | undefined;
            phoneNumber?: string | undefined;
            password: string;
        }): Promise<import("./api/user").CommonUserResponse>;
        logout(): Promise<import("./api").ApiResponse>;
        changePwd(params: {
            oldPassword: string;
            newPassword: string;
        }): Promise<import("./api").ApiResponse>;
        getProfile(): Promise<{
            error: number;
            msg: string;
            data: {
                user: import("./api/user").UserInfo;
                region: import("./api/user").RegionType;
            };
        }>;
        updateProfile(params: {
            nickname?: string | undefined;
            acceptEmailAd?: boolean | undefined;
            accountConsult?: boolean | undefined;
        }): Promise<import("./api").ApiResponse>;
        refresh(): Promise<{
            error: number;
            msg: string;
            data: {
                at: string;
                rt: string;
            };
        }>;
        register(params: {
            countryCode: string;
            email?: string | undefined;
            phoneNumber?: string | undefined;
            verificationCode: string;
            password: string;
        }): Promise<import("./api/user").CommonUserResponse>;
        sendVerificationCode(params: {
            type: 0 | 1 | 4 | 3;
            email?: string | undefined;
            phoneNumber?: string | undefined;
        }): Promise<import("./api").ApiResponse>;
        smsLogin(params: {
            countryCode: string;
            lang?: "cn" | "en" | undefined;
            phoneNumber: string;
            verificationCode: string;
        }): Promise<import("./api/user").CommonUserResponse>;
        resetPwd(params: {
            email?: string | undefined;
            phoneNumber?: string | undefined;
            verificationCode: string;
            password: string;
        }): Promise<import("./api/user").CommonUserResponse>;
        closeAccount(params: {
            verificationCode: string;
        }): Promise<import("./api").ApiResponse>;
    };
    home: {
        homepage(params?: {
            lang?: "cn" | "en" | undefined;
            clientInfo?: {
                model?: string | undefined;
                os?: string | undefined;
                imei?: string | undefined;
                romVersion?: string | undefined;
                appVersion?: string | undefined;
            } | undefined;
            getUser?: {} | undefined;
            getFamily?: {} | undefined;
            getThing?: {
                num?: number | undefined;
                beginIndex?: number | undefined;
            } | undefined;
            getScene?: {} | undefined;
            getMessage?: {
                from?: number | undefined;
                num?: number | undefined;
            } | undefined;
        } | undefined): Promise<{
            error: number;
            msg: string;
            data: {
                userInfo?: import("./api/user").UserInfo | undefined;
                familyInfo?: import("./api/family").FamilyItem | undefined;
                thingInfo?: import("./api/device").ThingData | undefined;
                sceneInfo?: any;
                messageInfo?: {
                    messageList: import("./api/message").MessageItem[];
                } | undefined;
            };
        }>;
    };
    device: {
        getThingList(params?: {
            lang?: "cn" | "en" | undefined;
            familyid?: string | undefined;
            num?: number | undefined;
            beginIndex?: number | undefined;
        } | undefined): Promise<{
            error: number;
            msg: string;
            data: {
                thingList: {
                    itemType: number;
                    itemData: import("./api/device").ThingData;
                    index: number;
                }[];
                total: number;
            };
        }>;
        getSpecThingList(params: {
            thingList: {
                itemType: import("./api/device").ThingType;
                id: string;
            }[];
        }): Promise<{
            error: number;
            msg: string;
            data: {
                thingList: import("./api/device").ThingData[];
            };
        }>;
        getThingStatus(params: {
            type: import("./api/family").SortType;
            id: string;
            params?: string | undefined;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                params: any;
            };
        }>;
        updateThingStatus(params: {
            type: import("./api/family").SortType;
            id: string;
            params: any;
        }): Promise<import("./api").ApiResponse>;
        updateMultiThingStatus(params: {
            thingList: {
                type: import("./api/family").SortType;
                id: string;
                params: any;
            }[];
            timeout?: number | undefined;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                respList: {
                    type: import("./api/family").SortType;
                    id: string;
                    error: number;
                }[];
            };
        }>;
        addWifiDevice(params: {
            name: string;
            deviceid: string;
            settings?: {
                opsNotify?: number | undefined;
                opsHistory?: number | undefined;
                alarmNotify?: number | undefined;
            } | undefined;
            ifrCode?: string | undefined;
            digest: string;
            chipid?: string | undefined;
            familyid?: string | undefined;
            roomid?: string | undefined;
            sort?: number | undefined;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                itemType: number;
                itemData: import("./api/device").ThingData;
                index: number;
            };
        }>;
        addGsmDevice(params: {
            id: string;
            name: string;
            familyid?: string | undefined;
            roomid?: string | undefined;
            sort?: number | undefined;
        }): Promise<import("./api").ApiResponse>;
        updateDeviceInfo(params: {
            deviceid: string;
            name?: string | undefined;
            roomid?: string | undefined;
        }): Promise<import("./api").ApiResponse>;
        delDevice(params: {
            deviceid: string;
        }): Promise<import("./api").ApiResponse>;
        updateDeviceTag(params: {
            deviceid: string;
            type?: "replace" | "merge" | undefined;
            tags: any;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                updatedThing: any;
            };
        }>;
        getGroupList(params?: {
            lang?: "cn" | "en" | undefined;
        } | undefined): Promise<{
            error: number;
            msg: string;
            data: {
                groupList: {
                    itemType: number;
                    itemData: {
                        id: string;
                        name: string;
                        mainDeviceId: string;
                        family: import("./api/device").DeviceFamily;
                        params: any;
                    };
                    index: number;
                }[];
            };
        }>;
        addGroup(params: {
            name: string;
            mainDeviceId: string;
            familyid?: string | undefined;
            roomid?: string | undefined;
            sort?: number | undefined;
            deviceidList?: string[] | undefined;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                itemType: number;
                itemData: import("./api/device").ThingData;
                index: number;
            };
        }>;
        updateGroup(params: {
            id: string;
            name: string;
        }): Promise<import("./api").ApiResponse>;
        delGroup(params: {
            id: string;
        }): Promise<import("./api").ApiResponse>;
        updateGroupStatus(params: {
            id: string;
            params: any;
        }): Promise<import("./api").ApiResponse>;
        addGroupDevice(params: {
            id: string;
            deviceidList: string[];
        }): Promise<{
            error: number;
            msg: string;
            data: {
                updatedThingList: any[];
            };
        }>;
        delGroupDevice(params: {
            id: string;
            deviceidList: string[];
        }): Promise<{
            error: number;
            msg: string;
            data: {
                updatedThingList: any[];
            };
        }>;
        updateGroupList(params: {
            id: string;
            deviceidList: string[];
        }): Promise<{
            error: number;
            msg: string;
            data: {
                updatedThingList: any[];
            };
        }>;
        shareDevice(params: {
            deviceidList: string[];
            user: {
                countryCode?: string | undefined;
                phoneNumber?: string | undefined;
                email?: string | undefined;
            };
            permit: number;
            comment?: string | undefined;
            shareType?: number | undefined;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                updatedThingList: any[];
            };
        }>;
        updateSharePermit(params: {
            deviceid: string;
            apikey: string;
            permit: number;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                updatedThingList: any[];
            };
        }>;
        cancelShare(params: {
            deviceid: string;
            apikey: string;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                updatedThingList: any[];
            };
        }>;
        getHistory(params: {
            deviceid: string;
            from?: number | undefined;
            num?: number | undefined;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                histories: {
                    deviceid: string;
                    userAgent?: string | undefined;
                    opsSwitchs?: string | undefined;
                    request: string;
                    opsAccount?: string | undefined;
                    opsTime: number;
                }[];
            };
        }>;
        delHistory(params: {
            deviceid: string;
        }): Promise<import("./api").ApiResponse>;
        getOtaInfo(params: {
            deviceInfoList: {
                deviceid: string;
                model: string;
                version: string;
            }[];
        }): Promise<{
            error: number;
            msg: string;
            data: {
                otaInfoList: {
                    deviceid: string;
                    version: string;
                    binList: {
                        name: string;
                        downloadUrl: string;
                        digest?: string | undefined;
                    }[];
                    type: string;
                    forceTime: string;
                }[];
            };
        }>;
    };
    family: {
        getFamilyList(params: {
            lang?: "cn" | "en" | undefined;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                familyList: import("./api/family").FamilyItem[];
                currentFamilyId: string;
            };
        }>;
        addFamily(params: {
            name: string;
            sort: import("./api/family").SortType;
            roomNameList?: string[] | undefined;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                id: string;
                name: string;
                index: number;
                roomList?: import("./api/family").RoomItem[] | undefined;
            };
        }>;
        addRoom(params: {
            familyid: string;
            name: string;
            sort: import("./api/family").SortType;
        }): Promise<{
            error: number;
            msg: string;
            data: {
                id: string;
                name: string;
                index: number;
            };
        }>;
        updateFamily(params: {
            id?: string | undefined;
            name: string;
        }): Promise<import("./api").ApiResponse>;
        updateRoom(params: {
            id: string;
            name: string;
        }): Promise<import("./api").ApiResponse>;
        sortRoom(params: {
            familyid?: string | undefined;
            idList: string[];
        }): Promise<import("./api").ApiResponse>;
        delFamily(params: {
            id: string;
            deviceFamily: string;
            switchFamily: string;
        }): Promise<import("./api").ApiResponse>;
        delRoom(params: {
            id: string;
        }): Promise<import("./api").ApiResponse>;
        sortThing(params: {
            familyid?: string | undefined;
            thingList: import("./api/family").ThingItem[];
        }): Promise<import("./api").ApiResponse>;
        setThing(params: {
            roomid: string;
            oldThingList: import("./api/family").ThingItem[];
            newThingList: import("./api/family").ThingItem[];
        }): Promise<import("./api").ApiResponse>;
        changeFamily(params: {
            id: string;
        }): Promise<import("./api").ApiResponse>;
    };
    message: {
        getMessageList(params?: {
            familyid?: string | undefined;
            from?: number | undefined;
            num?: number | undefined;
        } | undefined): Promise<{
            error: number;
            msg: string;
            data: {
                messageList: import("./api/message").MessageItem[];
            };
        }>;
    };
};
export default _default;
