"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getWsIpServices_1 = __importDefault(require("../services/getWsIpServices"));
const createNonce_1 = __importDefault(require("../utils/createNonce"));
const isNode_1 = __importDefault(require("../utils/isNode"));
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
class WebSocketService {
    constructor(config) {
        WebSocketService.connectConfig = config;
    }
    _initWs() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const { domain, port } = yield getWsIpServices_1.default();
            console.log(`SL : WebSocketService : returnnewPromise : isNode`, isNode_1.default);
            const ws = new isomorphic_ws_1.default(`wss://${domain}:${port}/api/ws`);
            ws.onclose = (ev) => this.onClose(ev);
            ws.onopen = (ev) => this.onOpen(ev);
            ws.onerror = (ev) => {
                reject({
                    error: 601,
                    msg: `${ev.error}-${ev.message}`,
                });
                this.onError(ev);
            };
            ws.onmessage = (ev) => {
                const { data } = ev;
                if (data !== 'pong') {
                    resolve({
                        error: 0,
                        msg: 'success',
                    });
                }
                this.onMessage(ev);
            };
            WebSocketService.ws = ws;
        }));
    }
    reconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            WebSocketService.ws = null;
            WebSocketService.isOpen = false;
            clearInterval(WebSocketService.hbInterval);
            WebSocketService.hbInterval = null;
            for (let count = 0; count < 10; count++) {
                yield this._initWs();
                if (WebSocketService.isOpen) {
                    break;
                }
            }
            if (!WebSocketService.isOpen) {
                throw new Error('长连接出现错误，重试失败，请重新连接！');
            }
        });
    }
    onOpen(ev) {
        return __awaiter(this, void 0, void 0, function* () {
            yield WebSocketService._sendHandShakeMsg();
        });
    }
    onError(ev) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`SL : WebSocketService : onError : ev`, ev);
            yield this.reconnect();
        });
    }
    onClose(ev) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`SL : WebSocketService : onClose : ev`, ev);
            if (WebSocketService.initClose) {
                WebSocketService.ws = null;
                WebSocketService.isOpen = false;
                clearInterval(WebSocketService.hbInterval);
                WebSocketService.hbInterval = null;
                return;
            }
            yield this.reconnect();
        });
    }
    onMessage(ev) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('ws 接收到连接信息', ev.data);
            const { data } = ev;
            if (data === 'pong') {
                return;
            }
            const decodedData = JSON.parse(data);
            if (decodedData.error === 0 && decodedData.config && decodedData.config.hb) {
                WebSocketService.isOpen = true;
                WebSocketService.sendMessage('ping');
                WebSocketService.hbInterval = setInterval(() => {
                    WebSocketService.sendMessage('ping');
                }, (decodedData.config.hbInterval - 7) * 1000);
                return;
            }
            if (decodedData.error === 504) {
                console.log("连接超时，重试");
                yield this.reconnect();
            }
        });
    }
    static sendMessage(params) {
        if (WebSocketService.ws) {
            if (typeof params === 'string') {
                WebSocketService.ws.send(params);
                return;
            }
            WebSocketService.ws.send(JSON.stringify(params));
        }
    }
    sendThing(deviceConfig, action) {
        return __awaiter(this, void 0, void 0, function* () {
            const { deviceid, params, deviceApikey } = deviceConfig;
            const sequence = Date.now();
            const deviceParams = {
                action,
                deviceid,
                apikey: deviceApikey,
                userAgent: 'app',
                sequence,
                params,
            };
            WebSocketService.sendMessage(deviceParams);
            return deviceParams;
        });
    }
    static _sendHandShakeMsg() {
        return __awaiter(this, void 0, void 0, function* () {
            const { appid, at, apikey } = WebSocketService.connectConfig;
            if (WebSocketService.ws) {
                const params = {
                    action: 'userOnline',
                    version: 8,
                    ts: Math.round(new Date().getTime() / 1000).toString(),
                    at,
                    userAgent: 'app',
                    apikey,
                    appid,
                    nonce: createNonce_1.default(),
                    sequence: Date.now(),
                };
                WebSocketService.sendMessage(params);
            }
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (WebSocketService.ws) {
                return WebSocketService.ws;
            }
            return yield this._initWs();
        });
    }
    close() {
        if (WebSocketService.ws) {
            WebSocketService.initClose = true;
            WebSocketService.ws.close();
        }
    }
}
exports.default = WebSocketService;
WebSocketService.initClose = false;
