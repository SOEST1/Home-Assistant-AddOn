"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const WebSocket_1 = __importDefault(require("./WebSocket"));
const eventEmitter_1 = __importDefault(require("./../utils/eventEmitter"));
const enum_1 = require("../ts/enum");
class CoolKitWs {
    init(config) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { at, apikey, appid, secret } = config;
                if (!at || !apikey || !appid || !secret) {
                    throw new Error('参数不能为空');
                }
                const newWs = new WebSocket_1.default(config);
                const result = yield newWs.init();
                CoolKitWs.ws = newWs;
                return result;
            }
            catch (error) {
                throw new Error(`长连接连接出错, ${error}`);
            }
        });
    }
    close() {
        const ws = this.getWs();
        ws.close();
    }
    updateThing(deviceConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const ws = this.getWs();
            const { deviceid, deviceApikey, params } = deviceConfig;
            if (!deviceid || !deviceApikey || !params) {
                throw new Error('参数不能为空');
            }
            const { sequence } = yield ws.sendThing(deviceConfig, 'update');
            return yield this.getMessage(sequence, deviceid);
        });
    }
    queryThing(queryConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const ws = this.getWs();
            const { deviceid, deviceApikey, params } = queryConfig;
            if (!deviceid || !deviceApikey || !params) {
                throw new Error('参数不能为空');
            }
            const { sequence } = yield ws.sendThing(queryConfig, 'query');
            return yield this.getMessage(sequence, deviceid);
        });
    }
    on(method, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const ws = this.getWs();
            if (WebSocket_1.default.ws && ws) {
                WebSocket_1.default.ws.addEventListener(method, callback);
            }
        });
    }
    getMessage(sequence, deviceid) {
        return new Promise((resolve) => {
            eventEmitter_1.default.once(`${enum_1.EEventType.DEVICE_MSG}${sequence}${deviceid}`, (data) => resolve(data));
        });
    }
    getWs() {
        if (CoolKitWs.ws) {
            return CoolKitWs.ws;
        }
        throw new Error('请使用 init 方法初始化长连接后再调用本方法！');
    }
}
exports.default = CoolKitWs;
CoolKitWs.ws = null;
