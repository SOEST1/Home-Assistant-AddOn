import { IConfig, IDeviceConfig, IDeviceResponse, IQueryConfig, IUpgradeConfig } from '../ts/interfaces';
import WebSocket from 'ws';
export default class CoolKitWs {
    private static ws;
    init(config: IConfig): Promise<import("../ts/interfaces").IResponse | WebSocket>;
    close(): void;
    updateThing(deviceConfig: IDeviceConfig): Promise<IDeviceResponse>;
    queryThing(queryConfig: IQueryConfig): Promise<IDeviceResponse>;
    upgradeThing(upgradeConfig: IUpgradeConfig): Promise<IDeviceResponse>;
    on(method: 'message', callback: (event: {
        data: any;
        type: string;
        target: WebSocket;
    }) => void, options?: WebSocket.EventListenerOptions): Promise<void>;
    on(method: 'open', callback: (event: {
        target: WebSocket;
    }) => void, options?: WebSocket.EventListenerOptions): Promise<void>;
    on(method: 'error', callback: (event: {
        error: any;
        message: any;
        type: string;
        target: WebSocket;
    }) => void, options?: WebSocket.EventListenerOptions): Promise<void>;
    on(method: 'close', callback: (event: {
        wasClean: boolean;
        code: number;
        reason: string;
        target: WebSocket;
    }) => void, options?: WebSocket.EventListenerOptions): Promise<void>;
    private getMessage;
    private getWs;
}
